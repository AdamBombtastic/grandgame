// Code generated by goa v3.18.2, DO NOT EDIT.
//
// game HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/Adambombtastic/grandgame/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	game "github.com/Adambombtastic/grandgame/gen/game"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildParticipantsRequest instantiates a HTTP request object with method and
// path set to call the "game" service "participants" endpoint
func (c *Client) BuildParticipantsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ParticipantsGamePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("game", "participants", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeParticipantsResponse returns a decoder for responses returned by the
// game participants endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeParticipantsResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeParticipantsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ParticipantsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("game", "participants", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateParticipantResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("game", "participants", err)
			}
			res := NewParticipantsParticipantOK(body)
			return res, nil
		case http.StatusNotFound:
			var (
				body ParticipantsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("game", "participants", err)
			}
			err = ValidateParticipantsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("game", "participants", err)
			}
			return nil, NewParticipantsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body ParticipantsInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("game", "participants", err)
			}
			err = ValidateParticipantsInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("game", "participants", err)
			}
			return nil, NewParticipantsInternalError(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("game", "participants", resp.StatusCode, string(body))
		}
	}
}

// unmarshalParticipantResponseToGameParticipant builds a value of type
// *game.Participant from a value of type *ParticipantResponse.
func unmarshalParticipantResponseToGameParticipant(v *ParticipantResponse) *game.Participant {
	res := &game.Participant{
		ID:        *v.ID,
		Name:      *v.Name,
		Email:     *v.Email,
		Phone:     *v.Phone,
		Kind:      *v.Kind,
		Role:      *v.Role,
		Backstory: *v.Backstory,
		Gold:      *v.Gold,
		Favor:     *v.Favor,
	}

	return res
}
