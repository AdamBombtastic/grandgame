// Code generated by goa v3.18.2, DO NOT EDIT.
//
// game HTTP client types
//
// Command:
// $ goa gen github.com/Adambombtastic/grandgame/design

package client

import (
	game "github.com/Adambombtastic/grandgame/gen/game"
	goa "goa.design/goa/v3/pkg"
)

// ParticipantsResponseBody is the type of the "game" service "participants"
// endpoint HTTP response body.
type ParticipantsResponseBody []*ParticipantResponse

// ParticipantsNotFoundResponseBody is the type of the "game" service
// "participants" endpoint HTTP response body for the "not_found" error.
type ParticipantsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ParticipantsInternalErrorResponseBody is the type of the "game" service
// "participants" endpoint HTTP response body for the "internal_error" error.
type ParticipantsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ParticipantResponse is used to define fields on response body types.
type ParticipantResponse struct {
	// Unique participant ID
	ID *int `form:"Id,omitempty" json:"Id,omitempty" xml:"Id,omitempty"`
	// Name of participant
	Name *string `form:"Name,omitempty" json:"Name,omitempty" xml:"Name,omitempty"`
	// Email of participant
	Email *string `form:"Email,omitempty" json:"Email,omitempty" xml:"Email,omitempty"`
	// Phone number of participant
	Phone *string `form:"Phone,omitempty" json:"Phone,omitempty" xml:"Phone,omitempty"`
	// Kind of participant
	Kind *string `form:"Kind,omitempty" json:"Kind,omitempty" xml:"Kind,omitempty"`
	// Role of participant
	Role *string `form:"Role,omitempty" json:"Role,omitempty" xml:"Role,omitempty"`
	// Backstory of participant
	Backstory *string `form:"Backstory,omitempty" json:"Backstory,omitempty" xml:"Backstory,omitempty"`
	// Gold of participant
	Gold *int `form:"Gold,omitempty" json:"Gold,omitempty" xml:"Gold,omitempty"`
	// Influence of participant
	Favor *int `form:"Favor,omitempty" json:"Favor,omitempty" xml:"Favor,omitempty"`
}

// NewParticipantsParticipantOK builds a "game" service "participants" endpoint
// result from a HTTP "OK" response.
func NewParticipantsParticipantOK(body []*ParticipantResponse) []*game.Participant {
	v := make([]*game.Participant, len(body))
	for i, val := range body {
		v[i] = unmarshalParticipantResponseToGameParticipant(val)
	}

	return v
}

// NewParticipantsNotFound builds a game service participants endpoint
// not_found error.
func NewParticipantsNotFound(body *ParticipantsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewParticipantsInternalError builds a game service participants endpoint
// internal_error error.
func NewParticipantsInternalError(body *ParticipantsInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateParticipantsNotFoundResponseBody runs the validations defined on
// participants_not_found_response_body
func ValidateParticipantsNotFoundResponseBody(body *ParticipantsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateParticipantsInternalErrorResponseBody runs the validations defined
// on participants_internal_error_response_body
func ValidateParticipantsInternalErrorResponseBody(body *ParticipantsInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateParticipantResponse runs the validations defined on
// ParticipantResponse
func ValidateParticipantResponse(body *ParticipantResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Email", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Phone", "body"))
	}
	if body.Kind == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Kind", "body"))
	}
	if body.Role == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Role", "body"))
	}
	if body.Backstory == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Backstory", "body"))
	}
	if body.Gold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Gold", "body"))
	}
	if body.Favor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Favor", "body"))
	}
	if body.Kind != nil {
		if !(*body.Kind == "player" || *body.Kind == "admin" || *body.Kind == "superadmin") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.Kind", *body.Kind, []any{"player", "admin", "superadmin"}))
		}
	}
	if body.Role != nil {
		if !(*body.Role == "King" || *body.Role == "King's Hand" || *body.Role == "Archvizier" || *body.Role == "Noble" || *body.Role == "Mercenary") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.Role", *body.Role, []any{"King", "King's Hand", "Archvizier", "Noble", "Mercenary"}))
		}
	}
	return
}
