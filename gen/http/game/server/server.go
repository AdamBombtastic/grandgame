// Code generated by goa v3.18.2, DO NOT EDIT.
//
// game HTTP server
//
// Command:
// $ goa gen github.com/Adambombtastic/grandgame/design

package server

import (
	"context"
	"net/http"

	game "github.com/Adambombtastic/grandgame/gen/game"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the game service endpoint HTTP handlers.
type Server struct {
	Mounts                    []*MountPoint
	ListParticipants          http.Handler
	ListAdvantages            http.Handler
	ListCompetitionEventKinds http.Handler
	CORS                      http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the game service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *game.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListParticipants", "GET", "/participants"},
			{"ListAdvantages", "GET", "/advantages"},
			{"ListCompetitionEventKinds", "GET", "/competition_events/kinds"},
			{"CORS", "OPTIONS", "/participants"},
			{"CORS", "OPTIONS", "/advantages"},
			{"CORS", "OPTIONS", "/competition_events/kinds"},
		},
		ListParticipants:          NewListParticipantsHandler(e.ListParticipants, mux, decoder, encoder, errhandler, formatter),
		ListAdvantages:            NewListAdvantagesHandler(e.ListAdvantages, mux, decoder, encoder, errhandler, formatter),
		ListCompetitionEventKinds: NewListCompetitionEventKindsHandler(e.ListCompetitionEventKinds, mux, decoder, encoder, errhandler, formatter),
		CORS:                      NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "game" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListParticipants = m(s.ListParticipants)
	s.ListAdvantages = m(s.ListAdvantages)
	s.ListCompetitionEventKinds = m(s.ListCompetitionEventKinds)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return game.MethodNames[:] }

// Mount configures the mux to serve the game endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListParticipantsHandler(mux, h.ListParticipants)
	MountListAdvantagesHandler(mux, h.ListAdvantages)
	MountListCompetitionEventKindsHandler(mux, h.ListCompetitionEventKinds)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the game endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListParticipantsHandler configures the mux to serve the "game" service
// "list_participants" endpoint.
func MountListParticipantsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGameOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/participants", f)
}

// NewListParticipantsHandler creates a HTTP handler which loads the HTTP
// request and calls the "game" service "list_participants" endpoint.
func NewListParticipantsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListParticipantsResponse(encoder)
		encodeError    = EncodeListParticipantsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_participants")
		ctx = context.WithValue(ctx, goa.ServiceKey, "game")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListAdvantagesHandler configures the mux to serve the "game" service
// "list_advantages" endpoint.
func MountListAdvantagesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGameOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/advantages", f)
}

// NewListAdvantagesHandler creates a HTTP handler which loads the HTTP request
// and calls the "game" service "list_advantages" endpoint.
func NewListAdvantagesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListAdvantagesResponse(encoder)
		encodeError    = EncodeListAdvantagesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_advantages")
		ctx = context.WithValue(ctx, goa.ServiceKey, "game")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListCompetitionEventKindsHandler configures the mux to serve the "game"
// service "list_competition_event_kinds" endpoint.
func MountListCompetitionEventKindsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGameOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/competition_events/kinds", f)
}

// NewListCompetitionEventKindsHandler creates a HTTP handler which loads the
// HTTP request and calls the "game" service "list_competition_event_kinds"
// endpoint.
func NewListCompetitionEventKindsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListCompetitionEventKindsResponse(encoder)
		encodeError    = EncodeListCompetitionEventKindsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_competition_event_kinds")
		ctx = context.WithValue(ctx, goa.ServiceKey, "game")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service game.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleGameOrigin(h)
	mux.Handle("OPTIONS", "/participants", h.ServeHTTP)
	mux.Handle("OPTIONS", "/advantages", h.ServeHTTP)
	mux.Handle("OPTIONS", "/competition_events/kinds", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleGameOrigin applies the CORS response headers corresponding to the
// origin for the service game.
func HandleGameOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
