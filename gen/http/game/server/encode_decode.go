// Code generated by goa v3.18.2, DO NOT EDIT.
//
// game HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/Adambombtastic/grandgame/design

package server

import (
	"context"
	"errors"
	"net/http"

	game "github.com/Adambombtastic/grandgame/gen/game"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeParticipantsResponse returns an encoder for responses returned by the
// game participants endpoint.
func EncodeParticipantsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*game.Participant)
		enc := encoder(ctx, w)
		body := NewParticipantsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeParticipantsError returns an encoder for errors returned by the
// participants game endpoint.
func EncodeParticipantsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewParticipantsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal_error":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewParticipantsInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalGameParticipantToParticipantResponse builds a value of type
// *ParticipantResponse from a value of type *game.Participant.
func marshalGameParticipantToParticipantResponse(v *game.Participant) *ParticipantResponse {
	res := &ParticipantResponse{
		ID:        v.ID,
		Name:      v.Name,
		Email:     v.Email,
		Phone:     v.Phone,
		Kind:      v.Kind,
		Role:      v.Role,
		Backstory: v.Backstory,
		Gold:      v.Gold,
		Favor:     v.Favor,
	}

	return res
}
