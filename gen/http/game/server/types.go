// Code generated by goa v3.18.2, DO NOT EDIT.
//
// game HTTP server types
//
// Command:
// $ goa gen github.com/Adambombtastic/grandgame/design

package server

import (
	game "github.com/Adambombtastic/grandgame/gen/game"
	goa "goa.design/goa/v3/pkg"
)

// ParticipantsResponseBody is the type of the "game" service "participants"
// endpoint HTTP response body.
type ParticipantsResponseBody []*ParticipantResponse

// ParticipantsNotFoundResponseBody is the type of the "game" service
// "participants" endpoint HTTP response body for the "not_found" error.
type ParticipantsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ParticipantsInternalErrorResponseBody is the type of the "game" service
// "participants" endpoint HTTP response body for the "internal_error" error.
type ParticipantsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ParticipantResponse is used to define fields on response body types.
type ParticipantResponse struct {
	// Unique participant ID
	ID int `form:"Id" json:"Id" xml:"Id"`
	// Name of participant
	Name string `form:"Name" json:"Name" xml:"Name"`
	// Email of participant
	Email string `form:"Email" json:"Email" xml:"Email"`
	// Phone number of participant
	Phone string `form:"Phone" json:"Phone" xml:"Phone"`
	// Kind of participant
	Kind string `form:"Kind" json:"Kind" xml:"Kind"`
	// Role of participant
	Role string `form:"Role" json:"Role" xml:"Role"`
	// Backstory of participant
	Backstory string `form:"Backstory" json:"Backstory" xml:"Backstory"`
	// Gold of participant
	Gold int `form:"Gold" json:"Gold" xml:"Gold"`
	// Influence of participant
	Favor int `form:"Favor" json:"Favor" xml:"Favor"`
}

// NewParticipantsResponseBody builds the HTTP response body from the result of
// the "participants" endpoint of the "game" service.
func NewParticipantsResponseBody(res []*game.Participant) ParticipantsResponseBody {
	body := make([]*ParticipantResponse, len(res))
	for i, val := range res {
		body[i] = marshalGameParticipantToParticipantResponse(val)
	}
	return body
}

// NewParticipantsNotFoundResponseBody builds the HTTP response body from the
// result of the "participants" endpoint of the "game" service.
func NewParticipantsNotFoundResponseBody(res *goa.ServiceError) *ParticipantsNotFoundResponseBody {
	body := &ParticipantsNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewParticipantsInternalErrorResponseBody builds the HTTP response body from
// the result of the "participants" endpoint of the "game" service.
func NewParticipantsInternalErrorResponseBody(res *goa.ServiceError) *ParticipantsInternalErrorResponseBody {
	body := &ParticipantsInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}
